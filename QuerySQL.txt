-- Create table for categories
CREATE TABLE categorias (
  id bigint primary key generated always as identity,
  nombre text not null,
  descripcion text
);

-- Create table for products
CREATE TABLE productos (
  id bigint primary key generated always as identity,
  nombre text not null,
  descripcion text,
  precio numeric(12, 2) not null,
  categoria_id bigint not null,
  creado_en timestamp default now(),
  actualizado_en timestamp default now(),
  comentarios text,
  calificacion numeric(2, 1),
  CONSTRAINT fk_categoria FOREIGN KEY (categoria_id) REFERENCES categorias (id)
);

-- Create indexes for products
CREATE INDEX idx_productos_nombre ON productos USING btree (nombre);
CREATE INDEX idx_productos_precio ON productos USING btree (precio);
CREATE INDEX idx_productos_categoria ON productos USING btree (categoria_id);

-- Create table for inventory
CREATE TABLE inventario (
  id bigint primary key generated always as identity,
  producto_id bigint not null unique,
  cantidad int not null default 0,
  actualizado_en timestamp default now(),
  CONSTRAINT fk_inventario_producto FOREIGN KEY (producto_id) REFERENCES productos (id) ON DELETE CASCADE
);

-- Create enum type for transaction types
CREATE TYPE tipo_transaccion AS ENUM('VENTA', 'ENTRADA', 'DEVOLUCION', 'AJUSTE');

-- Create table for inventory transactions
CREATE TABLE transacciones_inventario (
  id bigint primary key generated always as identity,
  producto_id bigint not null,
  tipo tipo_transaccion not null,
  cantidad int not null,
  fecha timestamp default now(),
  usuario_id bigint,
  CONSTRAINT fk_trans_producto FOREIGN KEY (producto_id) REFERENCES productos (id) ON DELETE CASCADE
);

-- Create indexes for inventory transactions
CREATE INDEX idx_trans_producto_fecha ON transacciones_inventario USING btree (producto_id, fecha);
CREATE INDEX idx_trans_tipo ON transacciones_inventario USING btree (tipo);

-- Create table for roles
CREATE TABLE roles (
  id bigint primary key generated always as identity,
  nombre text not null unique
);

-- Insert roles into the roles table
INSERT INTO roles (nombre) VALUES ('CLIENTE'), ('ANALISTA'), ('BODEGA'), ('ADMIN');

-- Create table for users
CREATE TABLE usuarios (
  id bigint primary key generated always as identity,
  nombre text not null,
  correo text unique,
  rol_id bigint,
  CONSTRAINT fk_rol FOREIGN KEY (rol_id) REFERENCES roles (id)
);

-- Alter table to add foreign key for user transactions
ALTER TABLE transacciones_inventario
ADD CONSTRAINT fk_trans_usuario FOREIGN KEY (usuario_id) REFERENCES usuarios (id) ON DELETE SET NULL;

-- Insert main categories
INSERT INTO categorias (nombre, descripcion) VALUES
  ('Electronics', 'Devices and gadgets'),
  ('Home Appliances', 'Appliances for home use'),
  ('Clothing', 'Apparel and garments'),
  ('Books', 'Printed and digital books'),
  ('Toys', 'Toys and games for children'),
  ('Sports', 'Sports equipment and apparel'),
  ('Beauty', 'Beauty and personal care products'),
  ('Automotive', 'Automotive parts and accessories'),
  ('Furniture', 'Home and office furniture'),
  ('Groceries', 'Food and beverages');


-- Insert 1,000 simulated users with random roles
INSERT INTO usuarios (nombre, correo, rol_id)
SELECT
  'User ' || i,
  'user' || i || '@example.com',
  (SELECT id FROM roles ORDER BY random() LIMIT 1)
FROM generate_series(1, 1000) AS s(i);

-- Insert 70,000 products with random data
INSERT INTO productos (nombre, descripcion, precio, categoria_id, creado_en, actualizado_en, comentarios, calificacion)
SELECT
  'Product ' || i,
  'Description for product ' || i,
  round((random() * 1000 + 1)::numeric, 2),
  (SELECT id FROM categorias ORDER BY random() LIMIT 1),
  NOW() - (random() * (interval '365 days')),
  NOW(),
  'Comment for product ' || i,
  round((random() * 5)::numeric, 1)
FROM generate_series(1, 70000) AS s(i);

-- Insert a specific product
INSERT INTO productos (nombre, descripcion, precio, categoria_id, creado_en, actualizado_en, comentarios, calificacion)
VALUES
  ('Laptop', 'High-performance laptop', 500, (SELECT id FROM categorias WHERE nombre = 'Electronics' LIMIT 1), NOW(), NOW(), 'Great laptop for work and play', 4.5);

-- Insert inventory records for existing products
INSERT INTO inventario (producto_id, cantidad, actualizado_en)
SELECT id, (random() * 100)::int, NOW() FROM productos;

-- Insert inventory transactions for existing products
INSERT INTO transacciones_inventario (producto_id, tipo, cantidad, fecha, usuario_id)
SELECT 
    i.producto_id,
    CASE
        WHEN r < 0.70 THEN 'VENTA'
        WHEN r < 0.90 THEN 'ENTRADA'
        WHEN r < 0.95 THEN 'DEVOLUCION'
        ELSE 'AJUSTE'
    END AS tipo,
    (random() * 10 + 1)::int,  -- Cantidad entre 1 y 10
    NOW() - (random() * interval '365 days'), -- Fecha aleatoria del último año
    (SELECT id FROM usuarios ORDER BY random() LIMIT 1) -- Usuario aleatorio
FROM inventario i
JOIN productos p ON i.producto_id = p.id
CROSS JOIN LATERAL (SELECT random() AS r) rnd
LIMIT 100000;